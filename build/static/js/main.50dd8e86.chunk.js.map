{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/home/Deck.js","Layout/home/DeckList.js","Layout/deck/CardStudy.js","Layout/deck/DeckStudy.js","Layout/deck/DeckForm.js","Layout/deck/CreateDeck.js","Layout/card/CardForm.js","Layout/card/CardAdd.js","Layout/card/CardUnit.js","Layout/deck/DeckProfile.js","Layout/deck/DeckEdit.js","Layout/card/CardEdit.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","append","Deck","Card","Body","Title","length","Text","description","Button","variant","href","onClick","window","confirm","location","reload","DeckList","useState","decks","setDecks","undefined","setError","useEffect","abortController","AbortController","listDecks","then","catch","abort","listForDesks","map","CardStudy","index","lengthOfCards","handleNumber","flip","setFlip","text","setText","front","back","DeckStudy","useParams","setDeck","number","setNumber","push","useHistory","deckFromAPI","log","getDeck","listCards","array","Breadcrumb","Item","active","DeckForm","action","handleChange","formData","handleSubmit","Form","Group","Label","Control","as","placeholder","onChange","value","rows","type","CreateDeck","initialFormState","setFormData","target","event","NewDeck","postDeck","CardForm","htmlFor","CardAdd","NewCard","postCard","CardUnit","deleteCard","DeckProfile","listForCards","DeckEdit","DeckUpdate","CardEdit","setCard","getCard","cardFromAPI","CardUpdate","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50dd8e86.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { deleteDeck } from \"../../utils/api\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\nexport default function Deck({ deck }) {\r\n  const deleteClickHandler = () => {\r\n    if (\r\n      window.confirm(`Delete this deck?\\n\\nYou will not be able to recover it.`)\r\n    ) {\r\n      deleteDeck(deck.id);\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Body>\r\n          <Card.Title>\r\n            {deck.name}\r\n            <span> {deck.cards.length} cards</span>\r\n          </Card.Title>\r\n          <Card.Text>{deck.description}</Card.Text>\r\n          <Button variant=\"secondary\" href={`/decks/${deck.id}`}>\r\n            View\r\n          </Button>\r\n          <Button variant=\"primary\" href={`/decks/${deck.id}/study`}>\r\n            Study\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={deleteClickHandler}>\r\n            Delete\r\n          </Button>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { listDecks } from \"../../utils/api\";\r\nimport Deck from \"./Deck\";\r\n\r\nfunction DeckList() {\r\n  const [decks, setDecks] = useState([]);\r\n  const [error, setError] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    listDecks(abortController.signal).then(setDecks).catch(setError);\r\n\r\n    return () => abortController.abort();\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <div>NO DECKS HERE</div>;\r\n  }\r\n\r\n  const listForDesks = decks.map((deck) => <Deck key={deck.id} deck={deck} />);\r\n\r\n  return (\r\n    <main>\r\n      <section>{listForDesks}</section>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default DeckList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\n\r\nfunction CardStudy({ card, index, lengthOfCards, handleNumber }) {\r\n  const [flip, setFlip] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    text === card.front ? setText(card.back) : setText(card.front);\r\n  }, [flip]);\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Body>\r\n          <Card.Title>\r\n            Card {index + 1} of {lengthOfCards}\r\n          </Card.Title>\r\n          <Card.Text>{text}</Card.Text>\r\n          <Button variant=\"secondary\" onClick={() => setFlip(!flip)}>\r\n            flip\r\n          </Button>\r\n          {flip ? (\r\n            <Button variant=\"primary\" onClick={handleNumber}>\r\n              Next\r\n            </Button>\r\n          ) : null}\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardStudy;\r\n","import { useHistory, useParams } from \"react-router-dom\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { readDeck } from \"../../utils/api\";\r\nimport CardStudy from \"./CardStudy\";\r\nimport { Breadcrumb, Button } from \"react-bootstrap\";\r\n\r\nfunction DeckStudy() {\r\n  const { deckId } = useParams();\r\n  const [deck, setDeck] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [number, setNumber] = useState(0);\r\n  const { push } = useHistory();\r\n\r\n  useEffect(() => {\r\n    async function getDeck(deckId, signal) {\r\n      try {\r\n        const deckFromAPI = await readDeck(deckId, signal);\r\n        setDeck(deckFromAPI);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", error);\r\n        } else {\r\n          setError(error);\r\n        }\r\n      }\r\n    }\r\n    if (deckId) {\r\n      const abortController = new AbortController();\r\n      getDeck(deckId, abortController.signal);\r\n      return () => {\r\n        abortController.abort();\r\n      };\r\n    }\r\n  }, [deckId]);\r\n\r\n  if (error) {\r\n    console.log(error);\r\n    return <div>NO DECK: FETCH ERROR</div>;\r\n  }\r\n\r\n  if (!deck) {\r\n    return <div>NO DECK FOUND</div>;\r\n  }\r\n\r\n  const handleNumber = () => {\r\n    if (number + 1 < listCards.length) {\r\n      setNumber(number + 1);\r\n    } else {\r\n      window.confirm(\r\n        `Restart Cards?\\n\\nClick 'cancel' to return to the home page.`\r\n      )\r\n        ? setNumber(0)\r\n        : push(\"/\");\r\n    }\r\n  };\r\n\r\n  const listCards = deck.cards.map((card, index, array) => (\r\n    <CardStudy\r\n      card={card}\r\n      index={index}\r\n      lengthOfCards={array.length}\r\n      handleNumber={handleNumber}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Breadcrumb>\r\n          <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n          <Breadcrumb.Item href={`/decks/${deckId}`}>\r\n            {deck.name}\r\n          </Breadcrumb.Item>\r\n          <Breadcrumb.Item active>study</Breadcrumb.Item>\r\n        </Breadcrumb>\r\n      </header>\r\n      <h1>Study: {deck.name}</h1>\r\n      <div>\r\n        {listCards.length > 2 ? (\r\n          listCards[number]\r\n        ) : (\r\n          <div>\r\n            <h2>Not Enough cards</h2>\r\n            <p>\r\n              You need at least 3 cards to study. There are {listCards.length}{\" \"}\r\n              cards in this deck.\r\n            </p>\r\n            <Button onClick={() => push(`/decks/${deckId}/cards/new`)}>\r\n              Add Cards\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeckStudy;\r\n","import React from \"react\";\r\nimport { Breadcrumb, Form, Button } from \"react-bootstrap\";\r\nexport default function DeckForm({\r\n  action,\r\n  handleChange,\r\n  formData,\r\n  handleSubmit,\r\n  deck,\r\n}) {\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item> {deck && deck.name}</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>{action} Deck</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <h1>{action} Deck</h1>\r\n      <Form>\r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control\r\n            id=\"name\"\r\n            as=\"input\"\r\n            name=\"name\"\r\n            placeholder=\"Deck name\"\r\n            onChange={handleChange}\r\n            value={formData.name}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label>Description</Form.Label>\r\n          <Form.Control\r\n            id=\"description\"\r\n            as=\"textarea\"\r\n            rows={3}\r\n            name=\"description\"\r\n            placeholder=\"Brief description of the deck\"\r\n            onChange={handleChange}\r\n            value={formData.description}\r\n          />\r\n        </Form.Group>\r\n        <Button variant=\"secondary\" href={\"/\"}>\r\n          Cancel\r\n        </Button>\r\n        <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit}>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { createDeck } from \"../../utils/api\";\r\nimport DeckForm from \"./DeckForm\";\r\n\r\nexport default function CreateDeck() {\r\n  const initialFormState = {\r\n    name: \"\",\r\n    description: \"\",\r\n  };\r\n  const [formData, setFormData] = useState({ ...initialFormState });\r\n  const [error, setError] = useState(undefined);\r\n\r\n  const handleChange = ({ target }) => {\r\n    const value = target.value;\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: value,\r\n    });\r\n  };\r\n  const handleSubmit = (event) => {\r\n    async function postDeck(deck, signal) {\r\n      try {\r\n        const response = await createDeck(deck, signal);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", error);\r\n        } else {\r\n          setError(error);\r\n        }\r\n      }\r\n    }\r\n    const abortController = new AbortController();\r\n    const NewDeck = {\r\n      name: formData.name,\r\n      description: formData.description,\r\n    };\r\n    if (NewDeck.name !== \"\" && NewDeck.description !== \"\") {\r\n      postDeck(NewDeck, abortController.signal);\r\n      setFormData({ ...initialFormState });\r\n    } else {\r\n      window.confirm(\"Please put some entry\");\r\n    }\r\n  };\r\n\r\n  if (error) {\r\n    console.log(error);\r\n    return <div>POST ERROR</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <DeckForm\r\n        action={\"Create\"}\r\n        handleChange={handleChange}\r\n        formData={formData}\r\n        handleSubmit={handleSubmit}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Breadcrumb, Form, Button } from \"react-bootstrap\";\r\n\r\nexport default function CardForm({\r\n  action,\r\n  deckId,\r\n  handleChange,\r\n  formData,\r\n  handleSubmit,\r\n  deck,\r\n}) {\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item href={`/decks/${deckId}`}>\r\n          {deck && deck.name}\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item active>{action} Card</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <h1>{action} Card</h1>\r\n      <Form>\r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label htmlFor=\"front\">Front</Form.Label>\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            rows={2}\r\n            id=\"front\"\r\n            name=\"front\"\r\n            placeholder=\"Front side Card\"\r\n            onChange={handleChange}\r\n            value={formData.front}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\">\r\n          <Form.Label htmlFor=\"front\">Back</Form.Label>\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            rows={2}\r\n            id=\"back\"\r\n            name=\"back\"\r\n            placeholder=\"Back side Card\"\r\n            onChange={handleChange}\r\n            value={formData.back}\r\n          />\r\n        </Form.Group>\r\n        <Button href={`decks/${deckId}`}>Cancel</Button>\r\n        <Button onClick={handleSubmit}>Submit</Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { createCard, readDeck } from \"../../utils/api\";\r\nimport CardForm from \"./CardForm\";\r\n\r\nexport default function CardAdd() {\r\n  const initialFormState = {\r\n    front: \"\",\r\n    back: \"\",\r\n  };\r\n  const [deck, setDeck] = useState({});\r\n  const [error, setError] = useState(undefined);\r\n  const [formData, setFormData] = useState({ ...initialFormState });\r\n  const { deckId } = useParams();\r\n  const handleChange = ({ target }) => {\r\n    const value = target.value;\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: value,\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    async function getDeck(deckId, signal) {\r\n      try {\r\n        const deckFromAPI = await readDeck(deckId, signal);\r\n        setDeck(deckFromAPI);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", error);\r\n        } else {\r\n          setError(error);\r\n        }\r\n      }\r\n    }\r\n    if (deckId) {\r\n      const abortController = new AbortController();\r\n      getDeck(deckId, abortController.signal);\r\n      return () => {\r\n        abortController.abort();\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const handleSave = (event) => {\r\n    async function postCard(deckId, card, signal) {\r\n      try {\r\n        const response = await createCard(deckId, card, signal);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", error);\r\n        } else {\r\n          setError(error);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (deckId) {\r\n      const abortController = new AbortController();\r\n      const NewCard = {\r\n        front: formData.front,\r\n        back: formData.back,\r\n        deckId: deckId,\r\n      };\r\n      postCard(deckId, NewCard, abortController.signal);\r\n      return () => {\r\n        abortController.abort();\r\n      };\r\n    }\r\n    setFormData({ ...initialFormState });\r\n  };\r\n\r\n  if (error) {\r\n    console.log(error);\r\n    return <div>POST ERROR</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <CardForm\r\n        action={\"Add\"}\r\n        deckId={deckId}\r\n        handleChange={handleChange}\r\n        formData={formData}\r\n        handleSubmit={handleSave}\r\n        deck={deck}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { deleteCard } from \"../../utils/api\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\n\r\nexport default function CardUnit({ card, deckId }) {\r\n  const { push } = useHistory();\r\n  const deleteClickHandler = () => {\r\n    if (\r\n      window.confirm(\r\n        `Delete this deck?\\n\\n You will not be able to recover it.`\r\n      )\r\n    ) {\r\n      deleteCard(card.id);\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Body>\r\n        <Card.Text>\r\n          <p>{card.front}</p>\r\n          <p>{card.back}</p>\r\n        </Card.Text>\r\n        <Button\r\n          variant=\"secondary\"\r\n          onClick={() => {\r\n            push(`/decks/${deckId}/cards/${card.id}/edit`);\r\n          }}\r\n        >\r\n          Edit\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={deleteClickHandler}>\r\n          Delete\r\n        </Button>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readDeck, deleteDeck } from \"../../utils/api\";\r\nimport { Card, Breadcrumb, Button } from \"react-bootstrap\";\r\nimport CardUnit from \"../card/CardUnit\";\r\n\r\nfunction DeckProfile() {\r\n  const { deckId } = useParams();\r\n  const [deck, setDeck] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const { push } = useHistory();\r\n\r\n  useEffect(() => {\r\n    async function getDeck(deckId, signal) {\r\n      try {\r\n        const deckFromAPI = await readDeck(deckId, signal);\r\n        setDeck(deckFromAPI);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", error);\r\n        } else {\r\n          setError(error);\r\n        }\r\n      }\r\n    }\r\n    if (deckId) {\r\n      const abortController = new AbortController();\r\n      getDeck(deckId, abortController.signal);\r\n      return () => {\r\n        abortController.abort();\r\n      };\r\n    }\r\n  }, [deckId]);\r\n\r\n  if (error) {\r\n    console.log(error);\r\n    return <div>NO DECK: FETCH ERROR</div>;\r\n  }\r\n\r\n  if (!deck) {\r\n    return <div>NO DECK FOUND</div>;\r\n  }\r\n\r\n  const deleteClickHandler = () => {\r\n    if (\r\n      window.confirm(\r\n        `Delete this deck?\\n\\nYou will not be able to recover it.`\r\n      )\r\n    ) {\r\n      deleteDeck(deck.id);\r\n      push(\"/\");\r\n    }\r\n  };\r\n\r\n  const listForCards = deck.cards.map((card) => (\r\n    <CardUnit key={card.id} card={card} deckId={deckId} />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>{deck.name}</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div>\r\n        <Card.Title>{deck.name}</Card.Title>\r\n        <Card.Text>{deck.description}</Card.Text>\r\n        <Button\r\n          variant=\"secondary\"\r\n          onClick={() => push(`/decks/${deckId}/edit`)}\r\n        >\r\n          Edit\r\n        </Button>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() => push(`/decks/${deck.id}/study`)}\r\n        >\r\n          Study\r\n        </Button>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() => push(`/decks/${deckId}/cards/new`)}\r\n        >\r\n          Add Cards\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={deleteClickHandler}>\r\n          Delete\r\n        </Button>\r\n      </div>\r\n      <h2>Cards</h2>\r\n      {listForCards}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeckProfile;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readDeck, updateDeck } from \"../../utils/api\";\r\nimport DeckForm from \"./DeckForm\";\r\n\r\nfunction DeckEdit() {\r\n  const { deckId } = useParams();\r\n  const [deck, setDeck] = useState({});\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function getDeck(deckId, signal) {\r\n      try {\r\n        const deckFromAPI = await readDeck(deckId, signal);\r\n        setDeck(deckFromAPI);\r\n        setFormData(deckFromAPI);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", error);\r\n        } else {\r\n          setError(error);\r\n        }\r\n      }\r\n    }\r\n    if (deckId) {\r\n      const abortController = new AbortController();\r\n      getDeck(deckId, abortController.signal);\r\n      return () => {\r\n        abortController.abort();\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const initialFormState = {\r\n    name: \"\",\r\n    description: \"\",\r\n  };\r\n  const [formData, setFormData] = useState({ ...initialFormState });\r\n\r\n  const handleChange = ({ target }) => {\r\n    const value = target.value;\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    async function DeckUpdate(updatedDeck, signal) {\r\n      try {\r\n        const response = await updateDeck(updatedDeck, signal);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", error);\r\n        } else {\r\n          setError(error);\r\n        }\r\n      }\r\n    }\r\n    const abortController = new AbortController();\r\n    deck.name = formData.name;\r\n    deck.description = formData.description;\r\n    if (deck.name !== \"\" && deck.description !== \"\") {\r\n      DeckUpdate(deck, abortController.signal);\r\n      setFormData({ ...initialFormState });\r\n    } else {\r\n      window.confirm(\"Please put some entry\");\r\n    }\r\n  };\r\n\r\n  if (error) {\r\n    console.log(error);\r\n    return <div>NO DECK: FETCH ERROR</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <DeckForm\r\n        action={\"Edit\"}\r\n        handleChange={handleChange}\r\n        formData={formData}\r\n        handleSubmit={handleSubmit}\r\n        deck={deck}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeckEdit;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readDeck, readCard, updateCard } from \"../../utils/api\";\r\nimport CardForm from \"./CardForm\";\r\n\r\nfunction CardEdit() {\r\n  const { deckId, cardId } = useParams();\r\n  const { push } = useHistory();\r\n  const [deck, setDeck] = useState(null);\r\n  const [card, setCard] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const initialFormState = {\r\n    front: \"\",\r\n    back: \"\",\r\n  };\r\n  const [formData, setFormData] = useState({ ...initialFormState });\r\n\r\n  useEffect(() => {\r\n    async function getDeck(deckId, signal) {\r\n      try {\r\n        const deckFromAPI = await readDeck(deckId, signal);\r\n        setDeck(deckFromAPI);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", error);\r\n        } else {\r\n          setError(error);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (deckId) {\r\n      const abortController = new AbortController();\r\n      getDeck(deckId, abortController.signal);\r\n      async function getCard(cardId, signal) {\r\n        try {\r\n          const cardFromAPI = await readCard(cardId, signal);\r\n          setCard(cardFromAPI);\r\n          setFormData(cardFromAPI);\r\n        } catch (error) {\r\n          if (error.name === \"AbortError\") {\r\n            console.log(\"Aborted\", error);\r\n          } else {\r\n            setError(error);\r\n          }\r\n        }\r\n      }\r\n      getCard(cardId, abortController.signal);\r\n\r\n      return () => {\r\n        abortController.abort();\r\n      };\r\n    }\r\n  }, [cardId]);\r\n\r\n  const handleChange = ({ target }) => {\r\n    const value = target.value;\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    async function CardUpdate(updatedCard, signal) {\r\n      try {\r\n        const response = await updateCard(updatedCard, signal);\r\n      } catch (error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.log(\"Aborted\", error);\r\n        } else {\r\n          setError(error);\r\n        }\r\n      }\r\n    }\r\n    const abortController = new AbortController();\r\n    card.front = formData.front;\r\n    card.back = formData.back;\r\n    if (card.front !== \"\" && card.back !== \"\") {\r\n      CardUpdate(card, abortController.signal);\r\n      setFormData({ ...initialFormState });\r\n      push(`decks/${deckId}`);\r\n    } else {\r\n      window.confirm(\"Please put some entry\");\r\n    }\r\n  };\r\n\r\n  if (error) {\r\n    console.log(error);\r\n    return <div>NO CARD: FETCH ERROR</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <CardForm\r\n        action={\"Edit\"}\r\n        deckId={deckId}\r\n        handleChange={handleChange}\r\n        formData={formData}\r\n        handleSubmit={handleSubmit}\r\n        deck={deck}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardEdit;\r\n","import React, { Fragment } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport DeckList from \"./home/DeckList\";\nimport DeckStudy from \"./deck/DeckStudy\";\nimport CreateDeck from \"./deck/CreateDeck\";\nimport CardAdd from \"./card/CardAdd\";\nimport DeckProfile from \"./deck/DeckProfile\";\nimport DeckEdit from \"./deck/DeckEdit\";\nimport CardEdit from \"./card/CardEdit\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction Layout() {\n  return (\n    <Fragment>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <div className=\"container\">\n            <Button variant=\"secondary\" href=\"/decks/new\">\n              Create Deck\n            </Button>{\" \"}\n            <DeckList />\n          </div>\n        </Route>\n        <Route path=\"/decks/new\">\n          <CreateDeck />\n        </Route>\n        <Route path=\"/decks/:deckId/cards/new\">\n          <CardAdd />\n        </Route>\n        <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n          <CardEdit />\n        </Route>\n        <Route path=\"/decks/:deckId/edit\">\n          <DeckEdit />\n        </Route>\n        <Route path=\"/decks/:deckId/study\">\n          <DeckStudy />\n        </Route>\n        <Route path=\"/decks/:deckId\">\n          <DeckProfile />\n        </Route>\n        <Route>\n          <NotFound />\n        </Route>\n      </Switch>\n      {/* TODO: Implement the screen starting here */}\n    </Fragment>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}